{"version":3,"sources":["components/toStart.png","pages/Home.js","components/Navbar/Navbar.js","components/Cards/Cards.js","pages/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","className","id","Link","to","src","require","alt","Component","Navbar","props","role","aria-label","score","Cards","image","name","onClick","checkClick","storedIds","Game","state","images","data","stored","includes","_this","setState","shuffleImages","alert","push","newScore","length","console","log","i","j","Math","floor","random","temp","this","_this2","components_Navbar_Navbar","map","components_Cards_Cards","key","App","HashRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6565873d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/toStart.1b05ad9a.png\";","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../components/Home.css\";\n\nclass Home extends Component {\n    render() {\n        return (\n            <div className=\"home-img\">\n                <div className=\"row\" id=\"startRow\">\n                    <div className=\"col-md-3 offset-md-9\">\n                        <Link to=\"/game\">\n                            <img id=\"toStartBtn\" src= {require(\"../components/toStart.png\")} alt=\"start btn\"/>\n                        </Link>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default Home;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Navbar.css\";\n\nconst Navbar = props => (\n    <nav className=\"navbar navbar-expand-lg\">\n        <Link className=\"navbar-brand\" to=\"/\">Click That Pic!</Link>\n        <div className=\"collapse navbar-collapse\" id=\"navbarText\">\n            <span className=\"navbar-text\">\n                You know what to do \n                <span role=\"img\" aria-label=\"winking face emoji lol\"> ðŸ˜‰ </span>\n            </span>\n\n            <span className=\"navbar-text\">\n                Score: {props.score}\n            </span>\n    \n        </div>\n\n    </nav>\n);\n\nexport default Navbar;","import React from \"react\";\nimport \"./Cards.css\";\n\nconst Cards = props => (\n    <div className=\"card\">\n        <img className=\"card-img-top cardImg\" src={ props.image } alt={ props.name } onClick = { () => props.checkClick(props.id)} />\n    </div>\n);\n\nexport default Cards;\n","import React, { Component } from \"react\";\nimport Navbar from \"../components/Navbar\";\nimport Cards from \"../components/Cards\";\nimport images from \"../images.json\";\nimport \"../components/Game.css\";\n\n// array for images id\nlet storedIds = [];\n\nclass Game extends Component {\n    //setting initial states\n    state = {\n        images,\n        score: 0,\n        data: images,\n        stored: storedIds\n    };\n\n// when the app is mounted\n    componentDidMount() {\n        this.setState({data: this.shuffleImages(this.state.data)});\n    };\n\n// when an image is clicked ...\n    checkClick = id => {\n        // if the user chooses image that hasn't been chosen\n        // shuffle the dang thing and let em try again\n        if (!storedIds.includes(id) ) {\n            storedIds.push(id);\n            let newScore = this.state.score + 1;\n            this.setState({\n                score: newScore,\n                data: this.shuffleImages(this.state.data)\n            });\n            // user is done with the game\n             if (storedIds.length === images.length) {\n            storedIds = []\n            this.setState({\n                score: 0,\n                data: this.shuffleImages(this.state.data)\n            });\n            alert(\"you won!\");\n            }\n            console.log(storedIds);\n        // when user pics image already chosen\n        } else {\n            storedIds = []\n            this.setState({\n                score: 0,\n                stored: storedIds,\n                data: this.shuffleImages(this.state.data)\n            });\n                alert(\"lol, you lost\");\n        }\n    }\n\n// function to shuffle images\n    shuffleImages = images => {\n        for (let i = images.length-1; i>0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = images[i];\n            images[i] = images[j];\n            images[j] = temp;\n          }\n          return images;\n    };\n\n    render() {\n        return(\n            <div>\n                <Navbar\n                    score={this.state.score}\n                />\n                <div className=\"container\" id=\"gameContainer\">\n                    <div className=\"row\">\n                        {this.state.data.map(i => (\n                            <div className=\"col-lg-3 col-sm-6\">\n                                <Cards\n                                    key={i.id}\n                                    id={i.id}\n                                    image={i.image}\n                                    checkClick= {this.checkClick}\n                                />\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default Game;","import React, { Component } from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Game from \"./pages/Game\";\n\nclass App extends Component {    \n    render () {\n        return (\n            <HashRouter>\n                <Switch>\n                    <Route exact path=\"/\" component={Home}/>\n                    <Route exact path=\"/game\" component={Game}/>\n                </Switch>\n            </HashRouter>\n        )\n    };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}